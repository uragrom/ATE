import tkinter as tk
from tkinter import scrolledtext, messagebox, simpledialog, Menu, ttk, filedialog
import pyperclip
import webbrowser
import json
import os
from pystray import MenuItem as TrayMenuItem, Icon
from PIL import Image, ImageTk
import threading
import re
import qrcode
from io import BytesIO
import chardet
import subprocess
from pydub import AudioSegment
from collections import Counter
import sys
import win32clipboard
import win32con
import win32gui
import keyboard
import time
from datetime import datetime
import shutil
import tempfile
import mimetypes
import imageio
from moviepy.editor import VideoFileClip
import math
import ctypes
from ctypes import cast, POINTER
from comtypes import CLSCTX_ALL
from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume

try:
    from moviepy.editor import VideoFileClip
except ImportError:
    VideoFileClip = None


class VolumeControl:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç—å—é —Å–∏—Å—Ç–µ–º—ã"""

    def __init__(self):
        self.devices = AudioUtilities.GetSpeakers()
        self.interface = self.devices.Activate(
            IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
        self.volume = cast(self.interface, POINTER(IAudioEndpointVolume))

    def get_volume(self):
        """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å"""
        return self.volume.GetMasterVolumeLevelScalar()

    def set_volume(self, level):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å (0.0 - 1.0)"""
        self.volume.SetMasterVolumeLevelScalar(level, None)

    def increase_volume(self, increment=0.05):
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"""
        current = self.get_volume()
        new_level = min(1.0, current + increment)
        self.set_volume(new_level)
        return new_level


class TextEditorApp:
    def __init__(self, root):
        self.root = root
        root.title("Advanced Text Editor")
        root.geometry("800x650")
        root.protocol("WM_DELETE_WINDOW", self.minimize_to_tray)

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        self.history = self.load_data("history.json", max_items=50)
        self.favorites = self.load_data("favorites.json")

        # –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –≤–∫–ª–∞–¥–æ–∫
        self.notebook = ttk.Notebook(root)
        self.notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        # –í–∫–ª–∞–¥–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        self.editor_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.editor_frame, text="–†–µ–¥–∞–∫—Ç–æ—Ä")

        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        self.text_area = scrolledtext.ScrolledText(
            self.editor_frame,
            wrap=tk.WORD,
            width=90,
            height=25,
            font=("Arial", 12)
        )
        self.text_area.pack(padx=15, pady=15, fill=tk.BOTH, expand=True)

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ç–µ–∫—Å—Ç–∞
        self.text_area.bind("<<Modified>>", self.on_text_modified)
        self.text_area.bind("<FocusOut>", self.on_focus_out)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
        self.hotkeys = self.load_hotkeys()

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        self.create_context_menu()

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        self.bind_hotkeys()

        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫
        button_frame = tk.Frame(self.editor_frame)
        button_frame.pack(fill=tk.X, padx=10, pady=5)

        # –ö–Ω–æ–ø–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
        buttons = [
            ("üìã –í—Å—Ç–∞–≤–∏—Ç—å", self.paste_from_clipboard),
            ("üìÑ –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", self.copy_to_clipboard),
            ("üìÇ –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª", self.open_file),
            ("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", self.save_file),
            ("üîç –ù–∞–π—Ç–∏/–ó–∞–º–µ–Ω–∏—Ç—å", self.find_replace),
            ("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", self.show_stats),
            ("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–º–∞–π–ª—ã", self.remove_emojis),
            ("üî£ QR-–∫–æ–¥", self.generate_qrcode),
            ("üîÑ –°–º–µ–Ω–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥–∫—É", self.change_layout),
            ("üåç –ü–µ—Ä–µ–≤–µ—Å—Ç–∏", self.translate_text),
            ("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", self.open_settings),
            ("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä", self.open_file_converter),
            ("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", self.open_calculator)
        ]

        # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ 4 —Ä—è–¥–∞
        frames = [tk.Frame(button_frame) for _ in range(4)]
        for frame in frames:
            frame.pack(fill=tk.X)

        for i, (text, command) in enumerate(buttons):
            frame_idx = i // 4  # 4 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
            btn = tk.Button(
                frames[frame_idx],
                text=text,
                command=command,
                padx=5,
                pady=3
            )
            btn.pack(side=tk.LEFT, padx=2, pady=2, fill=tk.X, expand=True)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Å–º–µ–Ω—ã —Ä–∞—Å–∫–ª–∞–¥–∫–∏
        self.init_layout_dicts()

        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        self.create_history_favorites_tabs()

        # –°—Ç–∞—Ç—É—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        self.status_var = tk.StringVar()
        status_bar = tk.Label(
            root,
            textvariable=self.status_var,
            bd=1,
            relief=tk.SUNKEN,
            anchor=tk.W
        )
        status_bar.pack(side=tk.BOTTOM, fill=tk.X)

        # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        self.last_history_text = ""

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–µ–µ–º
        self.tray_icon = None
        self.tray_thread = None
        self.tray_active = False

        # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        self.hotkey_enabled = True
        self.hotkey_combination = "ctrl+alt+e"  # –ú–µ–Ω–µ–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ
        self.register_global_hotkey()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ffmpeg
        self.check_ffmpeg()

        self.update_status("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

    def create_context_menu(self):
        """–°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è —Å –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π"""
        self.context_menu = Menu(self.root, tearoff=0)
        self.context_menu.add_command(label="–í—ã—Ä–µ–∑–∞—Ç—å", command=self.cut_text)
        self.context_menu.add_command(label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", command=self.copy_text)
        self.context_menu.add_command(label="–í—Å—Ç–∞–≤–∏—Ç—å", command=self.paste_text)
        self.context_menu.add_separator()
        self.context_menu.add_command(label="–í—ã—á–∏—Å–ª–∏—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ", command=self.calculate_selection)
        self.context_menu.add_command(label="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ", command=self.show_selected_stats)
        self.context_menu.add_command(label="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ", command=self.clear_text)

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –ø–æ–ª—é
        self.text_area.bind("<Button-3>", self.show_context_menu)

    def show_context_menu(self, event):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é —Å —É—á–µ—Ç–æ–º –≤—ã–¥–µ–ª–µ–Ω–∏—è"""
        try:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é
            self.context_menu.delete(0, 'end')

            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É–Ω–∫—Ç—ã
            self.context_menu.add_command(label="–í—ã—Ä–µ–∑–∞—Ç—å", command=self.cut_text)
            self.context_menu.add_command(label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", command=self.copy_text)
            self.context_menu.add_command(label="–í—Å—Ç–∞–≤–∏—Ç—å", command=self.paste_text)
            self.context_menu.add_separator()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            if self.text_area.tag_ranges("sel"):
                selected_text = self.text_area.get("sel.first", "sel.last")

                # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
                if self.is_math_expression(selected_text):
                    try:
                        # –í—ã—á–∏—Å–ª—è–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
                        result = self.calculate_expression(selected_text)
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º (–Ω–µ –∞–∫—Ç–∏–≤–Ω—ã–π)
                        self.context_menu.add_command(
                            label=f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {selected_text} = {result}",
                            state=tk.DISABLED
                        )
                        self.context_menu.add_separator()
                    except Exception as e:
                        pass  # –ï—Å–ª–∏ –Ω–µ –≤—ã—á–∏—Å–ª–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

                # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.context_menu.add_command(label="–í—ã—á–∏—Å–ª–∏—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ", command=self.calculate_selection)
                self.context_menu.add_command(label="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ", command=self.show_selected_stats)
                self.context_menu.add_separator()

            # –û–±—â–∏–µ –ø—É–Ω–∫—Ç—ã
            self.context_menu.add_command(label="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ", command=self.clear_text)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
            self.context_menu.tk_popup(event.x_root, event.y_root)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é: {e}")

    def check_ffmpeg(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ffmpeg –≤ —Å–∏—Å—Ç–µ–º–µ"""
        if not shutil.which("ffmpeg"):
            self.update_status("–í–Ω–∏–º–∞–Ω–∏–µ: ffmpeg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∏–¥–µ–æ/–∞—É–¥–∏–æ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å")
            print("FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ffmpeg –¥–ª—è —Ä–∞–±–æ—Ç—ã –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞.")

    def show_context_menu(self, event):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é —Å —É—á–µ—Ç–æ–º –≤—ã–¥–µ–ª–µ–Ω–∏—è"""
        try:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é
            self.context_menu.delete(0, 'end')

            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É–Ω–∫—Ç—ã
            self.context_menu.add_command(label="–í—ã—Ä–µ–∑–∞—Ç—å", command=self.cut_text)
            self.context_menu.add_command(label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", command=self.copy_text)
            self.context_menu.add_command(label="–í—Å—Ç–∞–≤–∏—Ç—å", command=self.paste_text)
            self.context_menu.add_separator()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            if self.text_area.tag_ranges("sel"):
                selected_text = self.text_area.get("sel.first", "sel.last")

                # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
                if self.is_math_expression(selected_text):
                    try:
                        # –í—ã—á–∏—Å–ª—è–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
                        result = self.calculate_expression(selected_text)
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º (–Ω–µ –∞–∫—Ç–∏–≤–Ω—ã–π)
                        self.context_menu.add_command(
                            label=f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {selected_text} = {result}",
                            state=tk.DISABLED
                        )
                        self.context_menu.add_separator()
                    except Exception as e:
                        pass  # –ï—Å–ª–∏ –Ω–µ –≤—ã—á–∏—Å–ª–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

                # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.context_menu.add_command(label="–í—ã—á–∏—Å–ª–∏—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ", command=self.calculate_selection)
                self.context_menu.add_command(label="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ", command=self.show_selected_stats)
                self.context_menu.add_separator()

            # –û–±—â–∏–µ –ø—É–Ω–∫—Ç—ã
            self.context_menu.add_command(label="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ", command=self.clear_text)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
            self.context_menu.tk_popup(event.x_root, event.y_root)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é: {e}")

    def is_math_expression(self, text):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º"""
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        clean_text = text.replace(" ", "")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        operators = ['+', '-', '*', '/', '^', '%', '(', ')']
        if any(op in clean_text for op in operators):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–æ–ø—É—Å—Ç–∏–º—ã
            allowed_chars = "0123456789.+-*/^%()eœÄ"
            return all(c in allowed_chars for c in clean_text)
        return False

    def calculate_selection(self):
        """–í—ã—á–∏—Å–ª—è–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            selected_text = self.text_area.get("sel.first", "sel.last")

            if not selected_text:
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞")
                return

            # –í—ã—á–∏—Å–ª—è–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
            result = self.calculate_expression(selected_text)

            # –ó–∞–º–µ–Ω—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.text_area.delete("sel.first", "sel.last")
            self.text_area.insert("sel.first", str(result))

            self.update_status(f"–í—ã—á–∏—Å–ª–µ–Ω–æ: {selected_text} = {result}")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: {str(e)}")
            self.update_status(f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {str(e)}")


    def calculate_expression(self, expression):
        """–í—ã—á–∏—Å–ª—è–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ"""
        try:
            # –ó–∞–º–µ–Ω—è–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
            expr = expression.replace('^', '**').replace('œÄ', 'math.pi').replace('%', '/100')
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
            result = eval(expr, {"__builtins__": None}, {"math": math})
            return round(result, 4)  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 4 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        except Exception as e:
            raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: {str(e)}")

    def open_calculator(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä (—É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π)"""
        calc_win = tk.Toplevel(self.root)
        calc_win.title("–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
        calc_win.geometry("400x500")
        calc_win.resizable(False, False)
        calc_win.grab_set()

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.calc_input = tk.StringVar()
        self.calc_history = []

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞
        input_frame = tk.Frame(calc_win)
        input_frame.pack(fill=tk.X, padx=10, pady=10)

        input_entry = tk.Entry(
            input_frame,
            textvariable=self.calc_input,
            font=("Arial", 16),
            justify=tk.RIGHT,
            state='readonly'
        )
        input_entry.pack(fill=tk.X, ipady=10)

        # –ò—Å—Ç–æ—Ä–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
        history_frame = tk.LabelFrame(calc_win, text="–ò—Å—Ç–æ—Ä–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π")
        history_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)

        scrollbar = tk.Scrollbar(history_frame)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        self.history_list = tk.Listbox(
            history_frame,
            yscrollcommand=scrollbar.set,
            font=("Arial", 12)
        )
        self.history_list.pack(fill=tk.BOTH, expand=True)
        scrollbar.config(command=self.history_list.yview)

        # –ö–Ω–æ–ø–∫–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        buttons_frame = tk.Frame(calc_win)
        buttons_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫
        button_grid = [
            ['7', '8', '9', '/', 'C'],
            ['4', '5', '6', '*', '‚Üê'],
            ['1', '2', '3', '-', '('],
            ['0', '.', '=', '+', ')'],
            ['œÄ', '%', '^', '‚àö', '']
        ]

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º grid
        for i, row in enumerate(button_grid):
            for j, btn_text in enumerate(row):
                if btn_text:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏
                    btn = tk.Button(
                        buttons_frame,
                        text=btn_text,
                        font=("Arial", 14),
                        command=lambda t=btn_text: self.calc_button_click(t)
                    )
                    btn.grid(row=i, column=j, sticky="nsew", padx=2, pady=2)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
        for j in range(5):
            buttons_frame.columnconfigure(j, weight=1)
        for i in range(5):
            buttons_frame.rowconfigure(i, weight=1)

    def calc_button_click(self, button_text):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
        current_text = self.calc_input.get()

        if button_text == 'C':
            self.calc_input.set('')
        elif button_text == '‚Üê':
            self.calc_input.set(current_text[:-1])
        elif button_text == '=':
            try:
                # –ó–∞–º–µ–Ω—è–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
                expression = current_text.replace('^', '**').replace('œÄ', 'math.pi').replace('%', '/100')

                # –í—ã—á–∏—Å–ª—è–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
                result = eval(expression, {"__builtins__": None}, {"math": math})

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                history_entry = f"{current_text} = {result}"
                self.calc_history.append(history_entry)
                self.history_list.insert(tk.END, history_entry)
                self.history_list.see(tk.END)

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                self.calc_input.set(str(result))
            except Exception as e:
                self.calc_input.set("–û—à–∏–±–∫–∞")
        elif button_text == '‚àö':
            try:
                # –í—ã—á–∏—Å–ª—è–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å
                value = float(current_text) if current_text else 0.0
                result = math.sqrt(value)
                self.calc_input.set(str(result))
            except Exception as e:
                self.calc_input.set("–û—à–∏–±–∫–∞")
        else:
            self.calc_input.set(current_text + button_text)

    def register_global_hotkey(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –≥–æ—Ä—è—á—É—é –∫–ª–∞–≤–∏—à—É"""
        try:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –≥–æ—Ä—è—á—É—é –∫–ª–∞–≤–∏—à—É, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞
            if hasattr(self, 'hotkey_registered'):
                keyboard.remove_hotkey(self.hotkey_combination)

            keyboard.add_hotkey(self.hotkey_combination, self.global_hotkey_pressed)
            self.hotkey_registered = True
            self.update_status(f"–ì–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞: {self.hotkey_combination.upper()}")
        except Exception as e:
            error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä—è—á—É—é –∫–ª–∞–≤–∏—à—É: {str(e)}"
            if hasattr(self, 'status_var'):
                self.update_status(error_msg)
            else:
                print(error_msg)

    def global_hotkey_pressed(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π –≥–æ—Ä—è—á–µ–π –∫–ª–∞–≤–∏—à–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏)"""
        if not self.hotkey_enabled:
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Win32 API
            selected_text = self.get_selected_text()

            # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
            if selected_text:
                self.set_text(selected_text)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            self.restore_from_tray()
            self.root.lift()
            self.root.focus_force()

            self.update_status("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –≥–æ—Ä—è—á–µ–π –∫–ª–∞–≤–∏—à–µ–π")
        except Exception as e:
            self.update_status(f"–û—à–∏–±–∫–∞ –≥–æ—Ä—è—á–µ–π –∫–ª–∞–≤–∏—à–∏: {str(e)}")

    def get_selected_text(self):
        """–ü–æ–ª—É—á–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é Win32 API (–±–µ–∑ –∏–º–∏—Ç–∞—Ü–∏–∏ –∫–ª–∞–≤–∏—à)"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
            win32clipboard.OpenClipboard()
            try:
                original_clipboard = win32clipboard.GetClipboardData(win32con.CF_UNICODETEXT)
            except:
                original_clipboard = ""
            win32clipboard.CloseClipboard()

            # –ö–æ–ø–∏—Ä—É–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
            win32clipboard.OpenClipboard()
            win32clipboard.EmptyClipboard()

            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ
            hwnd = win32gui.GetForegroundWindow()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏
            win32gui.SendMessage(hwnd, win32con.WM_COPY, 0, 0)

            # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
            time.sleep(0.1)

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
            try:
                selected_text = win32clipboard.GetClipboardData(win32con.CF_UNICODETEXT)
            except:
                selected_text = ""

            win32clipboard.CloseClipboard()

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
            win32clipboard.OpenClipboard()
            win32clipboard.EmptyClipboard()
            win32clipboard.SetClipboardText(original_clipboard, win32con.CF_UNICODETEXT)
            win32clipboard.CloseClipboard()

            return selected_text
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {e}")
            return ""

    def on_text_modified(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
        if self.text_area.edit_modified():
            current_text = self.get_text()
            if current_text != self.last_history_text:
                self.add_to_history(current_text)
                self.last_history_text = current_text
            self.text_area.edit_modified(False)

    def on_focus_out(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞"""
        current_text = self.get_text()
        if current_text != self.last_history_text:
            self.add_to_history(current_text)
            self.last_history_text = current_text

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
    def load_data(self, filename, max_items=None):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON-—Ñ–∞–π–ª–∞"""
        data = []
        if os.path.exists(filename):
            try:
                with open(filename, "r", encoding="utf-8") as f:
                    data = json.load(f)
                    if max_items and len(data) > max_items:
                        data = data[-max_items:]
            except:
                pass
        return data

    def save_data(self, filename, data):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON-—Ñ–∞–π–ª"""
        try:
            with open(filename, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {str(e)}")

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–æ—Ä—è—á–∏–º–∏ –∫–ª–∞–≤–∏—à–∞–º–∏
    def load_hotkeys(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à –∏–∑ —Ñ–∞–π–ª–∞"""
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        default_hotkeys = {
            "F1": "–í—Å—Ç–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞",
            "F2": "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä",
            "F3": "–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–∞",
            "F4": "–£–¥–∞–ª–∏—Ç—å –±—É–∫–≤—ã",
            "F5": "–£–¥–∞–ª–∏—Ç—å —Ü–∏—Ñ—Ä—ã",
            "F6": "–£–¥–∞–ª–∏—Ç—å –í–°–ï —Ü–∏—Ñ—Ä—ã",
            "F7": "–£–¥–∞–ª–∏—Ç—å –í–°–ï –±—É–∫–≤—ã",
            "F8": "–í–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä",
            "F9": "–ù–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä",
            "F10": "–°–º–µ–Ω–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥–∫—É",
            "F11": "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏",
            "F12": "–°–≤–µ—Ä–Ω—É—Ç—å –≤ —Ç—Ä–µ–π"
        }

        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞
        if os.path.exists("hotkeys.json"):
            try:
                with open("hotkeys.json", "r", encoding="utf-8") as f:
                    return json.load(f)
            except:
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                return default_hotkeys
        return default_hotkeys

    def save_hotkeys(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à –≤ —Ñ–∞–π–ª"""
        try:
            with open("hotkeys.json", "w", encoding="utf-8") as f:
                json.dump(self.hotkeys, f, ensure_ascii=False, indent=2)
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {str(e)}")

    def bind_hotkeys(self):
        """–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º"""
        self.root.bind("<F1>", lambda e: self.paste_from_clipboard())
        self.root.bind("<F2>", lambda e: self.copy_to_clipboard())
        self.root.bind("<F3>", lambda e: self.delete_words())
        self.root.bind("<F4>", lambda e: self.delete_letters())
        self.root.bind("<F5>", lambda e: self.delete_digits())
        self.root.bind("<F6>", lambda e: self.remove_all_digits())
        self.root.bind("<F7>", lambda e: self.remove_all_letters())
        self.root.bind("<F8>", lambda e: self.to_uppercase())
        self.root.bind("<F9>", lambda e: self.to_lowercase())
        self.root.bind("<F10>", lambda e: self.change_layout())
        self.root.bind("<F11>", lambda e: self.translate_text())
        self.root.bind("<F12>", lambda e: self.minimize_to_tray())

    # –ú–µ—Ç–æ–¥—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    def create_context_menu(self):
        """–°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è —Å –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π"""
        self.context_menu = Menu(self.root, tearoff=0)
        self.context_menu.add_command(label="–í—ã—Ä–µ–∑–∞—Ç—å", command=self.cut_text)
        self.context_menu.add_command(label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", command=self.copy_text)
        self.context_menu.add_command(label="–í—Å—Ç–∞–≤–∏—Ç—å", command=self.paste_text)
        self.context_menu.add_separator()
        self.context_menu.add_command(label="–í—ã—á–∏—Å–ª–∏—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ", command=self.calculate_selection)
        self.context_menu.add_command(label="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ", command=self.show_selected_stats)
        self.context_menu.add_command(label="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ", command=self.clear_text)

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –ø–æ–ª—é
        self.text_area.bind("<Button-3>", self.show_context_menu)


    def show_context_menu(self, event):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é —Å —É—á–µ—Ç–æ–º –≤—ã–¥–µ–ª–µ–Ω–∏—è"""
        try:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é
            self.context_menu.delete(0, 'end')

            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É–Ω–∫—Ç—ã
            self.context_menu.add_command(label="–í—ã—Ä–µ–∑–∞—Ç—å", command=self.cut_text)
            self.context_menu.add_command(label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", command=self.copy_text)
            self.context_menu.add_command(label="–í—Å—Ç–∞–≤–∏—Ç—å", command=self.paste_text)
            self.context_menu.add_separator()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            if self.text_area.tag_ranges("sel"):
                selected_text = self.text_area.get("sel.first", "sel.last")

                # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
                if self.is_math_expression(selected_text):
                    try:
                        # –í—ã—á–∏—Å–ª—è–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
                        result = self.calculate_expression(selected_text)
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º (–Ω–µ –∞–∫—Ç–∏–≤–Ω—ã–π)
                        self.context_menu.add_command(
                            label=f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {selected_text} = {result}",
                            state=tk.DISABLED
                        )
                        self.context_menu.add_separator()
                    except Exception as e:
                        pass  # –ï—Å–ª–∏ –Ω–µ –≤—ã—á–∏—Å–ª–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

                # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.context_menu.add_command(label="–í—ã—á–∏—Å–ª–∏—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ", command=self.calculate_selection)
                self.context_menu.add_command(label="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ", command=self.show_selected_stats)
                self.context_menu.add_separator()

            # –û–±—â–∏–µ –ø—É–Ω–∫—Ç—ã
            self.context_menu.add_command(label="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ", command=self.clear_text)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
            self.context_menu.tk_popup(event.x_root, event.y_root)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é: {e}")

    def show_selected_stats(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            selected_text = self.text_area.get("sel.first", "sel.last")

            if not selected_text:
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞")
                return

            # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ
            dialog = tk.Toplevel(self.root)
            dialog.title("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞")
            dialog.geometry("300x200")

            # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            chars = len(selected_text)
            words = len(selected_text.split())
            lines = selected_text.count('\n') + 1
            digits = sum(c.isdigit() for c in selected_text)
            letters = sum(c.isalpha() for c in selected_text)

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats = [
                f"–°–∏–º–≤–æ–ª–æ–≤: {chars}",
                f"–°–ª–æ–≤: {words}",
                f"–°—Ç—Ä–æ–∫: {lines}",
                f"–¶–∏—Ñ—Ä: {digits}",
                f"–ë—É–∫–≤: {letters}"
            ]

            for i, stat in enumerate(stats):
                tk.Label(dialog, text=stat, anchor=tk.W).pack(fill=tk.X, padx=20, pady=5)

            # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
            tk.Button(dialog, text="–ó–∞–∫—Ä—ã—Ç—å", command=dialog.destroy).pack(pady=10)

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {str(e)}")

    def open_file_converter(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤"""
        converter_win = tk.Toplevel(self.root)
        converter_win.title("–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Ñ–∞–π–ª–æ–≤")
        converter_win.geometry("600x400")
        converter_win.grab_set()

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(converter_win)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)

        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        ttk.Label(main_frame, text="–¢–∏–ø –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:").grid(row=0, column=0, sticky=tk.W, pady=5)

        self.conversion_type = tk.StringVar(value="video_to_audio")
        conversion_options = [
            ("–í–∏–¥–µ–æ –≤ –∞—É–¥–∏–æ", "video_to_audio"),
            ("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ PNG", "image_to_png"),
            ("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ JPG", "image_to_jpg"),
            ("–ê—É–¥–∏–æ –≤ MP3", "audio_to_mp3")
        ]

        for i, (text, mode) in enumerate(conversion_options):
            rb = ttk.Radiobutton(
                main_frame,
                text=text,
                variable=self.conversion_type,
                value=mode
            )
            rb.grid(row=i + 1, column=0, sticky=tk.W, pady=2)

        # –í—ã–±–æ—Ä –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        ttk.Label(main_frame, text="–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª:").grid(row=0, column=1, sticky=tk.W, pady=5)
        self.source_file = tk.StringVar()
        ttk.Entry(main_frame, textvariable=self.source_file, width=30).grid(
            row=1, column=1, sticky=tk.EW, padx=5, pady=2
        )
        ttk.Button(
            main_frame,
            text="–û–±–∑–æ—Ä...",
            command=lambda: self.browse_file(self.source_file)
        ).grid(row=1, column=2, padx=5, pady=2)

        # –í—ã–±–æ—Ä –ø–∞–ø–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        ttk.Label(main_frame, text="–ü–∞–ø–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:").grid(row=2, column=1, sticky=tk.W, pady=5)
        self.dest_folder = tk.StringVar(value=os.getcwd())
        ttk.Entry(main_frame, textvariable=self.dest_folder, width=30).grid(
            row=3, column=1, sticky=tk.EW, padx=5, pady=2
        )
        ttk.Button(
            main_frame,
            text="–û–±–∑–æ—Ä...",
            command=lambda: self.browse_folder(self.dest_folder)
        ).grid(row=3, column=2, padx=5, pady=2)

        # –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        ttk.Label(main_frame, text="–ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:").grid(row=4, column=1, sticky=tk.W, pady=5)
        self.output_name = tk.StringVar(value="converted_file")
        ttk.Entry(main_frame, textvariable=self.output_name, width=30).grid(
            row=5, column=1, sticky=tk.EW, padx=5, pady=2
        )

        # –°—Ç–∞—Ç—É—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        self.convert_status = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
        ttk.Label(main_frame, textvariable=self.convert_status).grid(
            row=6, column=0, columnspan=3, pady=10
        )

        # –ö–Ω–æ–ø–∫–∏
        btn_frame = ttk.Frame(main_frame)
        btn_frame.grid(row=7, column=0, columnspan=3, pady=10)

        ttk.Button(btn_frame, text="–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", command=self.convert_file).pack(
            side=tk.LEFT, padx=10
        )
        ttk.Button(btn_frame, text="–ó–∞–∫—Ä—ã—Ç—å", command=converter_win.destroy).pack(
            side=tk.LEFT, padx=10
        )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        main_frame.columnconfigure(1, weight=1)

    def browse_file(self, target_var):
        """–û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞"""
        file_path = filedialog.askopenfilename()
        if file_path:
            target_var.set(file_path)

    def browse_folder(self, target_var):
        """–û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏"""
        folder_path = filedialog.askdirectory()
        if folder_path:
            target_var.set(folder_path)

    def convert_file(self):
        """–í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é —Ñ–∞–π–ª–∞"""
        source = self.source_file.get()
        dest_folder = self.dest_folder.get()
        output_name = self.output_name.get()
        conversion_type = self.conversion_type.get()

        if not source or not os.path.exists(source):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª")
            return

        if not dest_folder or not os.path.exists(dest_folder):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")
            return

        try:
            self.convert_status.set("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è...")
            self.root.update()

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            ext_map = {
                "video_to_audio": ".mp3",
                "image_to_png": ".png",
                "image_to_jpg": ".jpg",
                "audio_to_mp3": ".mp3"
            }

            output_ext = ext_map.get(conversion_type, "")
            output_path = os.path.join(dest_folder, f"{output_name}{output_ext}")

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if conversion_type == "video_to_audio":
                self.convert_video_to_audio(source, output_path)
            elif conversion_type.startswith("image_to_"):
                self.convert_image(source, output_path)
            elif conversion_type == "audio_to_mp3":
                self.convert_audio_to_mp3(source, output_path)

            self.convert_status.set(f"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {os.path.basename(output_path)}")
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω:\n{output_path}")

        except Exception as e:
            self.convert_status.set("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é: {str(e)}")
            print(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")

    def convert_video_to_audio(self, input_path, output_path):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤–∏–¥–µ–æ –≤ –∞—É–¥–∏–æ (MP3)"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º moviepy –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            video = VideoFileClip(input_path)
            audio = video.audio
            audio.write_audiofile(output_path, verbose=False, logger=None)
            audio.close()
            video.close()
        except Exception as e:
            # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º ffmpeg –µ—Å–ª–∏ moviepy –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
            try:
                if not shutil.which("ffmpeg"):
                    raise Exception("FFmpeg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

                cmd = [
                    "ffmpeg", "-i", input_path,
                    "-vn", "-acodec", "libmp3lame",
                    "-ab", "192k", output_path,
                    "-y"
                ]
                subprocess.run(cmd, check=True, capture_output=True)
            except Exception as fallback_error:
                raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: {fallback_error}")

    def convert_image(self, input_path, output_path):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–∂–¥—É —Ñ–æ—Ä–º–∞—Ç–∞–º–∏"""
        try:
            img = Image.open(input_path)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –¥–ª—è JPG
            if output_path.lower().endswith(('.jpg', '.jpeg')):
                if img.mode in ("RGBA", "P"):
                    img = img.convert("RGB")

            img.save(output_path)
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")

    def convert_audio_to_mp3(self, input_path, output_path):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∞—É–¥–∏–æ –≤ MP3"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º pydub –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            audio = AudioSegment.from_file(input_path)
            audio.export(output_path, format="mp3")
        except Exception as e:
            # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º ffmpeg
            try:
                if not shutil.which("ffmpeg"):
                    raise Exception("FFmpeg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

                cmd = [
                    "ffmpeg", "-i", input_path,
                    "-codec:a", "libmp3lame", "-qscale:a", "2",
                    output_path, "-y"
                ]
                subprocess.run(cmd, check=True, capture_output=True)
            except Exception as fallback_error:
                raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {fallback_error}")

    def cut_text(self):
        """–í—ã—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç"""
        self.text_area.event_generate("<<Cut>>")

    def copy_text(self):
        """–ö–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç"""
        self.text_area.event_generate("<<Copy>>")

    def paste_text(self):
        """–í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç"""
        self.text_area.event_generate("<<Paste>>")

    def clear_text(self):
        """–û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ"""
        self.text_area.delete("1.0", tk.END)

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º
    def get_text(self):
        """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è"""
        return self.text_area.get("1.0", tk.END).strip()

    def set_text(self, text):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ"""
        self.text_area.delete("1.0", tk.END)
        self.text_area.insert("1.0", text)
        self.add_to_history(text)

    def paste_from_clipboard(self):
        """–í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞"""
        try:
            text = pyperclip.paste()
            self.set_text(text)
            self.update_status("–¢–µ–∫—Å—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω –∏–∑ –±—É—Ñ–µ—Ä–∞")
        except:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞")
            self.update_status("–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –∏–∑ –±—É—Ñ–µ—Ä–∞")

    def copy_to_clipboard(self):
        """–ö–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        text = self.get_text()
        if text:
            pyperclip.copy(text)
            self.update_status("–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
        else:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–¢–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Å—Ç")
            self.update_status("–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")

    def delete_words(self):
        """–£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞"""
        words = simpledialog.askstring("–£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤", "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
        if not words:
            return

        text = self.get_text()
        for word in words.split(','):
            cleaned_word = word.strip()
            if cleaned_word:
                text = text.replace(cleaned_word, '')
        self.set_text(text)
        self.update_status("–°–ª–æ–≤–∞ —É–¥–∞–ª–µ–Ω—ã")

    def delete_letters(self):
        """–£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –±—É–∫–≤—ã"""
        letters = simpledialog.askstring("–£–¥–∞–ª–µ–Ω–∏–µ –±—É–∫–≤", "–í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—ã –±–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π:")
        if not letters:
            return

        text = self.get_text()
        for letter in letters:
            text = text.replace(letter, '')
        self.set_text(text)
        self.update_status("–ë—É–∫–≤—ã —É–¥–∞–ª–µ–Ω—ã")

    def delete_digits(self):
        """–£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ü–∏—Ñ—Ä—ã"""
        digits = simpledialog.askstring("–£–¥–∞–ª–µ–Ω–∏–µ —Ü–∏—Ñ—Ä", "–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—ã –±–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π:")
        if not digits:
            return

        text = self.get_text()
        for digit in digits:
            text = text.replace(digit, '')
        self.set_text(text)
        self.update_status("–¶–∏—Ñ—Ä—ã —É–¥–∞–ª–µ–Ω—ã")

    def remove_all_digits(self):
        """–£–¥–∞–ª—è–µ–º –≤—Å–µ —Ü–∏—Ñ—Ä—ã"""
        text = self.get_text()
        text = ''.join(c for c in text if not c.isdigit())
        self.set_text(text)
        self.update_status("–í—Å–µ —Ü–∏—Ñ—Ä—ã —É–¥–∞–ª–µ–Ω—ã")

    def remove_all_letters(self):
        """–£–¥–∞–ª—è–µ–º –≤—Å–µ –±—É–∫–≤—ã"""
        text = self.get_text()
        text = ''.join(c for c in text if not c.isalpha())
        self.set_text(text)
        self.update_status("–í—Å–µ –±—É–∫–≤—ã —É–¥–∞–ª–µ–Ω—ã")

    def to_uppercase(self):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä"""
        text = self.get_text()
        self.set_text(text.upper())
        self.update_status("–¢–µ–∫—Å—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä")

    def to_lowercase(self):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä"""
        text = self.get_text()
        self.set_text(text.lower())
        self.update_status("–¢–µ–∫—Å—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä")

    def init_layout_dicts(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Å–º–µ–Ω—ã —Ä–∞—Å–∫–ª–∞–¥–∫–∏"""
        en_lower = "qwertyuiop[]asdfghjkl;'zxcvbnm,."
        ru_lower = "–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é"
        en_upper = "QWERTYUIOP{}ASDFGHJKL:\"ZXCVBNM<>"
        ru_upper = "–ô–¶–£–ö–ï–ù–ì–®–©–ó–•–™–§–´–í–ê–ü–†–û–õ–î–ñ–≠–Ø–ß–°–ú–ò–¢–¨–ë–Æ"

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        self.en_to_ru = dict(zip(en_lower + en_upper, ru_lower + ru_upper))
        self.ru_to_en = dict(zip(ru_lower + ru_upper, en_lower + en_upper))

    def change_layout(self):
        """–ú–µ–Ω—è–µ–º —Ä–∞—Å–∫–ª–∞–¥–∫—É —Ç–µ–∫—Å—Ç–∞"""
        text = self.get_text()
        converted = []
        for char in text:
            if char in self.en_to_ru:
                converted.append(self.en_to_ru[char])
            elif char in self.ru_to_en:
                converted.append(self.ru_to_en[char])
            else:
                converted.append(char)
        self.set_text(''.join(converted))
        self.update_status("–†–∞—Å–∫–ª–∞–¥–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞")

    def translate_text(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤ Google Translate"""
        text = self.get_text()
        if text:
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è Google Translate
            url = f"https://translate.google.com/?sl=auto&tl=en&text={text}"
            webbrowser.open(url)
            self.update_status("–û—Ç–∫—Ä—ã—Ç –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ Google")
        else:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞")
            self.update_status("–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞")

    def open_settings(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à"""
        settings_win = tk.Toplevel(self.root)
        settings_win.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à")
        settings_win.geometry("500x400")
        settings_win.grab_set()

        tk.Label(settings_win, text="–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:", font=("Arial", 12, "bold")).pack(pady=10)

        frame = tk.Frame(settings_win)
        frame.pack(padx=20, pady=10, fill=tk.BOTH, expand=True)

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞
        entries = {}
        for i, (hotkey, description) in enumerate(self.hotkeys.items()):
            row = tk.Frame(frame)
            row.pack(fill=tk.X, pady=2)

            lbl = tk.Label(row, text=f"{description}:", width=25, anchor=tk.W)
            lbl.pack(side=tk.LEFT)

            ent = tk.Entry(row, width=10)
            ent.insert(0, hotkey)
            ent.pack(side=tk.LEFT, padx=5)
            entries[description] = ent

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –≥–æ—Ä—è—á–µ–π –∫–ª–∞–≤–∏—à–∏
        tk.Label(settings_win, text="–ì–ª–æ–±–∞–ª—å–Ω–∞—è –≥–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞:", font=("Arial", 10, "bold")).pack(pady=10,
                                                                                                    anchor=tk.W)

        hotkey_frame = tk.Frame(settings_win)
        hotkey_frame.pack(fill=tk.X, padx=20, pady=5)

        tk.Label(hotkey_frame, text="–°–æ—á–µ—Ç–∞–Ω–∏–µ –∫–ª–∞–≤–∏—à:").pack(side=tk.LEFT)
        hotkey_entry = tk.Entry(hotkey_frame, width=20)
        hotkey_entry.insert(0, self.hotkey_combination)
        hotkey_entry.pack(side=tk.LEFT, padx=5)

        # –ö–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã
        btn_frame = tk.Frame(settings_win)
        btn_frame.pack(pady=15)

        def save_all_settings():
            self.save_settings(entries, settings_win)
            new_hotkey = hotkey_entry.get().strip().lower()
            if new_hotkey and new_hotkey != self.hotkey_combination:
                try:
                    keyboard.remove_hotkey(self.hotkey_combination)
                    self.hotkey_combination = new_hotkey
                    keyboard.add_hotkey(self.hotkey_combination, self.global_hotkey_pressed)
                    self.update_status(f"–ì–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {self.hotkey_combination.upper()}")
                except Exception as e:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –≥–æ—Ä—è—á—É—é –∫–ª–∞–≤–∏—à—É: {str(e)}")

        tk.Button(btn_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_all_settings).pack(side=tk.LEFT, padx=10)
        tk.Button(btn_frame, text="–û—Ç–º–µ–Ω–∞", command=settings_win.destroy).pack(side=tk.LEFT, padx=10)

    def save_settings(self, entries, window):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–æ—Ä–º—ã"""
        new_hotkeys = {}
        for description, entry in entries.items():
            hotkey = entry.get().strip()
            if hotkey:
                new_hotkeys[hotkey] = description

        if new_hotkeys:
            self.hotkeys = new_hotkeys
            self.save_hotkeys()
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
            window.destroy()

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–µ–µ–º
    def create_tray_icon(self):
        """–°–æ–∑–¥–∞–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è"""
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∫–æ–Ω–∫–∏
        image = Image.new('RGB', (64, 64), 'white')

        # –ú–µ–Ω—é –¥–ª—è –∏–∫–æ–Ω–∫–∏ –≤ —Ç—Ä–µ–µ
        menu = (
            TrayMenuItem('–û—Ç–∫—Ä—ã—Ç—å', self.restore_from_tray),
            TrayMenuItem('–í—ã—Ö–æ–¥', self.exit_app)
        )

        self.tray_icon = Icon("text_editor", image, "–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä", menu)

    def minimize_to_tray(self):
        """–°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –æ–∫–Ω–æ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π"""
        if not self.tray_active:
            self.create_tray_icon()
            self.tray_thread = threading.Thread(target=self.tray_icon.run, daemon=True)
            self.tray_thread.start()
            self.tray_active = True
        self.root.withdraw()  # –°–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ

    def restore_from_tray(self):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–∫–Ω–æ –∏–∑ —Ç—Ä–µ—è"""
        if self.tray_active and self.tray_icon:
            self.tray_icon.stop()
            self.tray_active = False
        self.root.deiconify()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        self.root.lift()
        self.root.focus_force()

    def exit_app(self):
        """–ü–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã—Ö–æ–¥–∏–º –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if self.tray_active and self.tray_icon:
            self.tray_icon.stop()
        self.root.destroy()

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    def create_history_favorites_tabs(self):
        """–°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
        # –í–∫–ª–∞–¥–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
        self.history_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.history_frame, text="–ò—Å—Ç–æ—Ä–∏—è")
        self.setup_history_ui()

        # –í–∫–ª–∞–¥–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        self.favorites_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.favorites_frame, text="–ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
        self.setup_favorites_ui()

    def setup_history_ui(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º UI –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏"""
        # –û—á–∏—â–∞–µ–º —Ñ—Ä–µ–π–º –∏—Å—Ç–æ—Ä–∏–∏
        for widget in self.history_frame.winfo_children():
            widget.destroy()

        # –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        search_frame = tk.Frame(self.history_frame)
        search_frame.pack(fill=tk.X, padx=10, pady=5)

        self.history_search_var = tk.StringVar()
        search_entry = tk.Entry(search_frame, textvariable=self.history_search_var, width=40)
        search_entry.pack(side=tk.LEFT, padx=5)
        search_entry.bind("<KeyRelease>", self.filter_history)

        tk.Button(search_frame, text="–ü–æ–∏—Å–∫", command=self.filter_history).pack(side=tk.LEFT, padx=5)
        tk.Button(search_frame, text="–û—á–∏—Å—Ç–∏—Ç—å", command=self.clear_history_search).pack(side=tk.LEFT, padx=5)

        # –§—Ä–µ–π–º –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        list_frame = tk.Frame(self.history_frame)
        list_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)

        # –ü–æ–ª–æ—Å–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scrollbar = tk.Scrollbar(list_frame)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        # –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏
        self.history_listbox = tk.Listbox(
            list_frame,
            yscrollcommand=scrollbar.set,
            width=100,
            height=20
        )
        self.history_listbox.pack(fill=tk.BOTH, expand=True)
        scrollbar.config(command=self.history_listbox.yview)

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        btn_frame = tk.Frame(self.history_frame)
        btn_frame.pack(fill=tk.X, padx=10, pady=5)

        tk.Button(btn_frame, text="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", command=self.restore_from_history).pack(side=tk.LEFT, padx=5)
        tk.Button(btn_frame, text="–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", command=self.add_to_favorites_from_history).pack(side=tk.LEFT, padx=5)
        tk.Button(btn_frame, text="–£–¥–∞–ª–∏—Ç—å", command=self.delete_from_history).pack(side=tk.LEFT, padx=5)

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        self.populate_history()

    def setup_favorites_ui(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º UI –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
        # –û—á–∏—â–∞–µ–º —Ñ—Ä–µ–π–º –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        for widget in self.favorites_frame.winfo_children():
            widget.destroy()

        # –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        search_frame = tk.Frame(self.favorites_frame)
        search_frame.pack(fill=tk.X, padx=10, pady=5)

        self.favorites_search_var = tk.StringVar()
        search_entry = tk.Entry(search_frame, textvariable=self.favorites_search_var, width=40)
        search_entry.pack(side=tk.LEFT, padx=5)
        search_entry.bind("<KeyRelease>", self.filter_favorites)

        tk.Button(search_frame, text="–ü–æ–∏—Å–∫", command=self.filter_favorites).pack(side=tk.LEFT, padx=5)
        tk.Button(search_frame, text="–û—á–∏—Å—Ç–∏—Ç—å", command=self.clear_favorites_search).pack(side=tk.LEFT, padx=5)

        # –§—Ä–µ–π–º –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        list_frame = tk.Frame(self.favorites_frame)
        list_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)

        # –ü–æ–ª–æ—Å–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scrollbar = tk.Scrollbar(list_frame)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        # –°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        self.favorites_listbox = tk.Listbox(
            list_frame,
            yscrollcommand=scrollbar.set,
            width=100,
            height=20
        )
        self.favorites_listbox.pack(fill=tk.BOTH, expand=True)
        scrollbar.config(command=self.favorites_listbox.yview)

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        btn_frame = tk.Frame(self.favorites_frame)
        btn_frame.pack(fill=tk.X, padx=10, pady=5)

        tk.Button(btn_frame, text="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", command=self.copy_from_favorites).pack(side=tk.LEFT, padx=5)
        tk.Button(btn_frame, text="–£–¥–∞–ª–∏—Ç—å", command=self.delete_from_favorites).pack(side=tk.LEFT, padx=5)

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        self.populate_favorites()

    def populate_history(self):
        """–ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏"""
        self.history_listbox.delete(0, tk.END)
        for item in reversed(self.history):
            preview = item['text'][:100] + "..." if len(item['text']) > 100 else item['text']
            self.history_listbox.insert(tk.END, f"{item['timestamp']}: {preview}")
            self.history_listbox.itemconfig(tk.END, {'fg': 'gray'})

    def populate_favorites(self):
        """–ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
        self.favorites_listbox.delete(0, tk.END)
        for item in self.favorites:
            preview = item['text'][:100] + "..." if len(item['text']) > 100 else item['text']
            self.favorites_listbox.insert(tk.END, f"{item['timestamp']}: {preview}")
            self.favorites_listbox.itemconfig(tk.END, {'fg': 'blue'})

    def filter_history(self, event=None):
        """–§–∏–ª—å—Ç—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É"""
        query = self.history_search_var.get().lower()
        self.history_listbox.delete(0, tk.END)

        for item in reversed(self.history):
            if query in item['text'].lower():
                preview = item['text'][:100] + "..." if len(item['text']) > 100 else item['text']
                self.history_listbox.insert(tk.END, f"{item['timestamp']}: {preview}")
                self.history_listbox.itemconfig(tk.END, {'fg': 'gray'})

    def filter_favorites(self, event=None):
        """–§–∏–ª—å—Ç—Ä—É–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É"""
        query = self.favorites_search_var.get().lower()
        self.favorites_listbox.delete(0, tk.END)

        for item in self.favorites:
            if query in item['text'].lower():
                preview = item['text'][:100] + "..." if len(item['text']) > 100 else item['text']
                self.favorites_listbox.insert(tk.END, f"{item['timestamp']}: {preview}")
                self.favorites_listbox.itemconfig(tk.END, {'fg': 'blue'})

    def clear_history_search(self):
        """–û—á–∏—â–∞–µ–º –ø–æ–∏—Å–∫ –≤ –∏—Å—Ç–æ—Ä–∏–∏"""
        self.history_search_var.set("")
        self.populate_history()

    def clear_favorites_search(self):
        """–û—á–∏—â–∞–µ–º –ø–æ–∏—Å–∫ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º"""
        self.favorites_search_var.set("")
        self.populate_favorites()

    def add_to_history(self, text):
        """–î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        if not text or (self.history and self.history[-1]['text'] == text):
            return

        self.history.append({
            "text": text,
            "timestamp": self.get_current_time()
        })
        self.save_data("history.json", self.history)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ –≤–∫–ª–∞–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
        if self.notebook.index(self.notebook.select()) == 1:
            self.populate_history()

    def restore_from_history(self):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"""
        selected_index = self.history_listbox.curselection()
        if not selected_index:
            return

        index = selected_index[0]
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤ –∏—Å—Ç–æ—Ä–∏–∏ (—Å —É—á–µ—Ç–æ–º —Ä–µ–≤–µ—Ä—Å–∞)
        real_index = len(self.history) - 1 - index
        if 0 <= real_index < len(self.history):
            self.set_text(self.history[real_index]['text'])

    def add_to_favorites_from_history(self):
        """–î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"""
        selected_index = self.history_listbox.curselection()
        if not selected_index:
            return

        index = selected_index[0]
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤ –∏—Å—Ç–æ—Ä–∏–∏ (—Å —É—á–µ—Ç–æ–º —Ä–µ–≤–µ—Ä—Å–∞)
        real_index = len(self.history) - 1 - index
        if 0 <= real_index < len(self.history):
            self.add_to_favorites(self.history[real_index]['text'])

    def delete_from_history(self):
        """–£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"""
        selected_index = self.history_listbox.curselection()
        if not selected_index:
            return

        index = selected_index[0]
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤ –∏—Å—Ç–æ—Ä–∏–∏ (—Å —É—á–µ—Ç–æ–º —Ä–µ–≤–µ—Ä—Å–∞)
        real_index = len(self.history) - 1 - index
        if 0 <= real_index < len(self.history):
            del self.history[real_index]
            self.save_data("history.json", self.history)
            self.populate_history()

    def copy_from_favorites(self):
        """–ö–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
        selected_index = self.favorites_listbox.curselection()
        if not selected_index:
            return

        index = selected_index[0]
        if 0 <= index < len(self.favorites):
            text = self.favorites[index]['text']
            pyperclip.copy(text)
            self.update_status("–¢–µ–∫—Å—Ç –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä")

    def delete_from_favorites(self):
        """–£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
        selected_index = self.favorites_listbox.curselection()
        if not selected_index:
            return

        index = selected_index[0]
        if 0 <= index < len(self.favorites):
            del self.favorites[index]
            self.save_data("favorites.json", self.favorites)
            self.populate_favorites()

    def add_to_favorites(self, text):
        """–î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
        for item in self.favorites:
            if item['text'] == text:
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–¢–µ–∫—Å—Ç —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")
                return

        self.favorites.append({
            "text": text,
            "timestamp": self.get_current_time()
        })
        self.save_data("favorites.json", self.favorites)
        self.populate_favorites()
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–¢–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")

    def get_current_time(self):
        """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏"""
        from datetime import datetime
        return datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
    def open_file(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"""
        file_path = filedialog.askopenfilename(
            filetypes=[
                ("–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã", "*.txt"),
                ("CSV —Ñ–∞–π–ª—ã", "*.csv"),
                ("JSON —Ñ–∞–π–ª—ã", "*.json"),
                ("XML —Ñ–∞–π–ª—ã", "*.xml"),
                ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
            ]
        )

        if not file_path:
            return

        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É
            with open(file_path, 'rb') as f:
                raw_data = f.read()
                encoding = chardet.detect(raw_data)['encoding'] or 'utf-8'

            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            with open(file_path, 'r', encoding=encoding) as f:
                content = f.read()
                self.set_text(content)
                self.update_status(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {file_path}")

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª: {str(e)}")
            self.update_status(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")

    def save_file(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª"""
        file_path = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[
                ("–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã", "*.txt"),
                ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
            ]
        )

        if not file_path:
            return

        try:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(self.get_text())
            self.update_status(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: {str(e)}")
            self.update_status(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ)
    def find_replace(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–∏—Å–∫–∞ –∏ –∑–∞–º–µ–Ω—ã"""
        dialog = tk.Toplevel(self.root)
        dialog.title("–ù–∞–π—Ç–∏ –∏ –∑–∞–º–µ–Ω–∏—Ç—å")
        dialog.geometry("400x250")
        dialog.grab_set()

        tk.Label(dialog, text="–ù–∞–π—Ç–∏:").grid(row=0, column=0, padx=10, pady=5, sticky=tk.W)
        find_entry = tk.Entry(dialog, width=30)
        find_entry.grid(row=0, column=1, padx=10, pady=5, sticky=tk.EW)

        tk.Label(dialog, text="–ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞:").grid(row=1, column=0, padx=10, pady=5, sticky=tk.W)
        replace_entry = tk.Entry(dialog, width=30)
        replace_entry.grid(row=1, column=1, padx=10, pady=5, sticky=tk.EW)

        case_var = tk.IntVar()
        tk.Checkbutton(dialog, text="–£—á–∏—Ç—ã–≤–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä", variable=case_var).grid(row=2, column=0, columnspan=2, padx=10,
                                                                                 pady=5, sticky=tk.W)

        whole_word_var = tk.IntVar()
        tk.Checkbutton(dialog, text="–°–ª–æ–≤–æ —Ü–µ–ª–∏–∫–æ–º", variable=whole_word_var).grid(row=3, column=0, columnspan=2,
                                                                                   padx=10, pady=5, sticky=tk.W)

        # –§—É–Ω–∫—Ü–∏–∏ –∑–∞–º–µ–Ω—ã
        def find_next():
            text = self.text_area.get("1.0", tk.END)
            pattern = find_entry.get()

            if not pattern:
                return

            if whole_word_var.get():
                pattern = r"\b" + re.escape(pattern) + r"\b"

            flags = 0 if case_var.get() else re.IGNORECASE
            match = re.search(pattern, text, flags)

            if match:
                start_index = f"1.0 + {match.start()} chars"
                end_index = f"1.0 + {match.end()} chars"
                self.text_area.tag_remove("highlight", "1.0", tk.END)
                self.text_area.tag_add("highlight", start_index, end_index)
                self.text_area.tag_config("highlight", background="yellow")
                self.text_area.focus()
                self.text_area.see(start_index)

        def replace_one():
            if self.text_area.tag_ranges("highlight"):
                self.text_area.delete("highlight.first", "highlight.last")
                self.text_area.insert("highlight.first", replace_entry.get())
                self.text_area.tag_remove("highlight", "1.0", tk.END)
            find_next()

        def replace_all():
            text = self.text_area.get("1.0", tk.END)
            pattern = find_entry.get()
            replace_with = replace_entry.get()

            if not pattern:
                return

            if whole_word_var.get():
                pattern = r"\b" + re.escape(pattern) + r"\b"

            flags = 0 if case_var.get() else re.IGNORECASE
            new_text = re.sub(pattern, replace_with, text, flags=flags)
            self.set_text(new_text)
            dialog.destroy()

        # –ö–Ω–æ–ø–∫–∏
        btn_frame = tk.Frame(dialog)
        btn_frame.grid(row=4, column=0, columnspan=2, pady=10)

        tk.Button(btn_frame, text="–ù–∞–π—Ç–∏", command=find_next).pack(side=tk.LEFT, padx=5)
        tk.Button(btn_frame, text="–ó–∞–º–µ–Ω–∏—Ç—å", command=replace_one).pack(side=tk.LEFT, padx=5)
        tk.Button(btn_frame, text="–ó–∞–º–µ–Ω–∏—Ç—å –≤—Å–µ", command=replace_all).pack(side=tk.LEFT, padx=5)
        tk.Button(btn_frame, text="–û—Ç–º–µ–Ω–∞", command=dialog.destroy).pack(side=tk.LEFT, padx=5)

    def show_stats(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–∫—Å—Ç–∞"""
        text = self.get_text()
        dialog = tk.Toplevel(self.root)
        dialog.title("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—Å—Ç–∞")
        dialog.geometry("300x250")

        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        chars = len(text)
        chars_no_space = len(text.replace(" ", ""))
        words = len(text.split())
        lines = text.count('\n') + 1
        digits = sum(c.isdigit() for c in text)
        letters = sum(c.isalpha() for c in text)
        special = chars - digits - letters - text.count(' ') - text.count('\n')

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = [
            f"–°–∏–º–≤–æ–ª–æ–≤: {chars}",
            f"–°–∏–º–≤–æ–ª–æ–≤ (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤): {chars_no_space}",
            f"–°–ª–æ–≤: {words}",
            f"–°—Ç—Ä–æ–∫: {lines}",
            f"–¶–∏—Ñ—Ä: {digits}",
            f"–ë—É–∫–≤: {letters}",
            f"–°–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤: {special}"
        ]

        for i, stat in enumerate(stats):
            tk.Label(dialog, text=stat, anchor=tk.W).pack(fill=tk.X, padx=20, pady=5)

        # –ß–∞—Å—Ç–æ—Ç–∞ —Å–∏–º–≤–æ–ª–æ–≤
        tk.Label(dialog, text="\n–ß–∞—Å—Ç–æ—Ç–∞ —Å–∏–º–≤–æ–ª–æ–≤:", font=("Arial", 9, "bold")).pack(anchor=tk.W, padx=20)

        from collections import Counter
        char_counter = Counter(text)
        top_chars = char_counter.most_common(5)

        for char, count in top_chars:
            if char == '\n':
                char = "\\n"
            elif char == ' ':
                char = "–ü—Ä–æ–±–µ–ª"
            tk.Label(dialog, text=f"'{char}': {count} —Ä–∞–∑", anchor=tk.W).pack(fill=tk.X, padx=30, pady=2)

    def remove_emojis(self):
        """–£–¥–∞–ª—è–µ–º —Å–º–∞–π–ª—ã –∏ —ç–º–æ–¥–∑–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        text = self.get_text()

        # –£–¥–∞–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –∏ —Å–º–∞–π–ª–æ–≤
        emoji_pattern = re.compile("["
                                   u"\U0001F600-\U0001F64F"  # emoticons
                                   u"\U0001F300-\U0001F5FF"  # symbols & pictographs
                                   u"\U0001F680-\U0001F6FF"  # transport & map symbols
                                   u"\U0001F1E0-\U0001F1FF"  # flags (iOS)
                                   u"\U00002500-\U00002BEF"  # chinese char
                                   u"\U00002702-\U000027B0"
                                   u"\U00002702-\U000027B0"
                                   u"\U000024C2-\U0001F251"
                                   u"\U0001f926-\U0001f937"
                                   u"\U00010000-\U0010ffff"
                                   u"\u2640-\u2642"
                                   u"\u2600-\u2B55"
                                   u"\u200d"
                                   u"\u23cf"
                                   u"\u23e9"
                                   u"\u231a"
                                   u"\ufe0f"  # dingbats
                                   u"\u3030"
                                   "]+", flags=re.UNICODE)

        # –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–º–∞–π–ª—ã
        text_smiles = [":\)", ":D", ":\(=", ":P", ";\)", ":\|", ":\/", ":O", ":\*", ":'\("]
        for smile in text_smiles:
            text = re.sub(re.escape(smile), "", text)

        # –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏
        clean_text = emoji_pattern.sub(r'', text)

        self.set_text(clean_text)
        self.update_status("–°–º–∞–π–ª—ã –∏ —ç–º–æ–¥–∑–∏ —É–¥–∞–ª–µ–Ω—ã")

    def generate_qrcode(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ –¥–ª—è —Ç–µ–∫—Å—Ç–∞"""
        text = self.get_text()
        if not text:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞")
            self.update_status("–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è QR-–∫–æ–¥–∞")
            return

        try:
            # –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥
            qr = qrcode.QRCode(
                version=1,
                error_correction=qrcode.constants.ERROR_CORRECT_L,
                box_size=10,
                border=4,
            )
            qr.add_data(text)
            qr.make(fit=True)
            img = qr.make_image(fill_color="black", back_color="white")

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å Tkinter
            img_tk = ImageTk.PhotoImage(img)

            # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ
            dialog = tk.Toplevel(self.root)
            dialog.title("QR-–∫–æ–¥ —Ç–µ–∫—Å—Ç–∞")

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º QR-–∫–æ–¥
            label = tk.Label(dialog, image=img_tk)
            label.image = img_tk  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
            label.pack(padx=20, pady=10)

            # –ö–Ω–æ–ø–∫–∏
            btn_frame = tk.Frame(dialog)
            btn_frame.pack(pady=10)

            tk.Button(btn_frame, text="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", command=lambda: self.copy_qrcode(img)).pack(side=tk.LEFT, padx=10)
            tk.Button(btn_frame, text="–ó–∞–∫—Ä—ã—Ç—å", command=dialog.destroy).pack(side=tk.LEFT, padx=10)

            self.update_status("QR-–∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥: {str(e)}")
            self.update_status(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞: {str(e)}")

    def copy_qrcode(self, img):
        """–ö–æ–ø–∏—Ä—É–µ–º QR-–∫–æ–¥ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        # –î–ª—è Windows
        if os.name == 'nt':
            try:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ BMP
                output = BytesIO()
                img.save(output, format="BMP")
                data = output.getvalue()[14:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ BMP
                output.close()

                # –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
                win32clipboard.OpenClipboard()
                win32clipboard.EmptyClipboard()
                win32clipboard.SetClipboardData(win32clipboard.CF_DIB, data)
                win32clipboard.CloseClipboard()
                self.update_status("QR-–∫–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
            except Exception as e:
                self.update_status(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –û–° –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            try:
                file_path = "qrcode.png"
                img.save(file_path)
                pyperclip.copy(file_path)
                self.update_status(f"QR-–∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {file_path}")
            except Exception as e:
                self.update_status(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    def update_status(self, message):
        """–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É"""
        self.status_var.set(f"–°—Ç–∞—Ç—É—Å: {message}")


if __name__ == "__main__":
    root = tk.Tk()
    app = TextEditorApp(root)
    root.mainloop()
